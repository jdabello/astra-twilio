import pulsar,time
import os
from dotenv import load_dotenv
from twilio.rest import Client
import ast
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
import json
from twilio_helper import TwilioHelper
from datetime import datetime

# Load the variables from the .env file
load_dotenv()
TABLE_NAME="messages"
KEYSPACE_NAME="demo"

# Create an instance of the TwilioHelper class
twilio_helper = TwilioHelper()

service_url = f'pulsar+ssl://{os.getenv("ASTRA_CLUSTER")}.streaming.datastax.com:6651'

token = os.getenv("ASTRA_TOKEN")

client = pulsar.Client(service_url,
                        authentication=pulsar.AuthenticationToken(token))

consumer = client.subscribe(f'persistent://{os.getenv("ASTRA_TENANT")}/default/{os.getenv("ASTRA_TOPIC")}', 'demo_sub')

# This secure connect bundle is autogenerated when you download your SCB, 
# if yours is different update the file name below
cloud_config= {
  'secure_connect_bundle': os.getenv("PATH_TO_SCB")
}

# This token JSON file is autogenerated when you download your token, 
# if yours is different update the file name below
with open(os.getenv("PATH_TO_TOKEN")) as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

# Prepare the insert statement
query = f"INSERT INTO {KEYSPACE_NAME}.{TABLE_NAME} (to_number, from_number, ssid, created_time, last_update) VALUES (?, ?, ?, ?, ?)"

waitingForMsg = True
while waitingForMsg:
    try:
        msg = consumer.receive(2000)
        print("Received message '{}' id='{}'".format(msg.data(), msg.message_id()))
        decoded_string = msg.data().decode('utf-8')
        decoded_dict=ast.literal_eval(decoded_string)
        #TODO Add necessary logic to stay under Twilio's API Rate Limits
        message_sid = twilio_helper.send_sms(decoded_dict["to_number"], decoded_dict["message_body"])
        current_time=datetime.now()

        if(len(message_sid) == 34):
            # Acknowledging the message to remove from message backlog
            try:
                prepared_stmt = session.prepare(query)
                
                # Execute the insert query with data
                result=session.execute(prepared_stmt, [decoded_dict["to_number"], os.getenv("TWILIO_NUMBER"), message_sid, current_time, current_time])
            except Exception as e:
                print(f"Error inserting message: {e}")
            consumer.acknowledge(msg)

        #waitingForMsg = False
    except Exception as e:
        print("Still waiting for a message...")

    time.sleep(1) # Perhaps sleep the thread the required time to stay under Twilio's API Rate Limits

client.close()
session.shutdown()
cluster.shutdown()