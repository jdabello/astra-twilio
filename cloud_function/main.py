import functions_framework
import logging
import os
from google.cloud import functions
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
import json
from datetime import datetime

logging.basicConfig(level=logging.INFO)

@functions_framework.http
def status_handler(request):
    """HTTP Cloud Function.
    Args:
        request (flask.Request): The request object.
        <https://flask.palletsprojects.com/en/1.1.x/api/#incoming-request-data>
    Returns:
        The response text, or any set of values that can be turned into a
        Response object using `make_response`
        <https://flask.palletsprojects.com/en/1.1.x/api/#flask.make_response>.
    """
    message_sid = request.values.get('MessageSid', None)
    message_status = request.values.get('MessageStatus', None)
    logging.info('SID: {}, Status: {}'.format(message_sid, message_status))

    # This secure connect bundle is autogenerated when you download your SCB, 
    # if yours is different update the file name below
    cloud_config= {
    'secure_connect_bundle': os.getenv("PATH_TO_SCB")
    }

    # This token JSON file is autogenerated when you download your token, 
    # if yours is different update the file name below
    with open(os.getenv("PATH_TO_TOKEN")) as f:
        secrets = json.load(f)

    CLIENT_ID = secrets["clientId"]
    CLIENT_SECRET = secrets["secret"]

    auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
    cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
    session = cluster.connect()
    current_time=datetime.now()
    #TODO If not successfull publish to deadletter queue
    query = "UPDATE demo.messages SET status = ?,last_update = ?  WHERE ssid = ?"
    prepared_statement = session.prepare(query)
    session.execute(prepared_statement,[message_status, current_time, message_sid])
    session.shutdown()
    cluster.shutdown()
    return (f"Message with sid '{message_sid}' updated to status '{message_status}'", 204)
